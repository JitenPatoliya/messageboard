{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/home.component.ts","webpack:///./src/app/messages.component.ts","webpack:///./src/app/nav.component.ts","webpack:///./src/app/new-message.component.ts","webpack:///./src/app/web.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Message } from './shared/message';\nimport { Component } from '@angular/core';\nimport { NavComponent } from './nav.component';\n\n@Component({\n  selector: 'app-root',\n  template: \n  `\n  <nav></nav>\n  <router-outlet></router-outlet>\n  `,\n})\nexport class AppComponent {\n    // @ViewChild(MessagesComponent, {static: false}) messages:MessagesComponent;\n\n    // onPosted(message:Message){\n    //   //this.messages.messages.push(message);\n    // }\n}\n","import { HomeComponent } from './home.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\nimport {MatButtonModule, MatCardModule, MatFormFieldModule\n      , MatInputModule, MatSnackBarModule, MatToolbarModule } from '@angular/material';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MessagesComponent } from './messages.component';\nimport { WebService } from './web.service';\nimport { NewMessageComponent } from './new-message.component';\nimport { FormsModule } from '@angular/forms';\nimport { NavComponent } from './nav.component';\n\nvar routes = [\n  {path:'', component: HomeComponent},\n  {path:'messages', component: MessagesComponent},\n  {path:'messages/:name', component: MessagesComponent},\n];\n\n@NgModule({\n  declarations: [\n    AppComponent, MessagesComponent, NewMessageComponent, \n    NavComponent, HomeComponent\n  ],\n  imports: [\n    BrowserModule,    HttpClientModule,  AppRoutingModule, FormsModule, MatSnackBarModule ,\n    BrowserAnimationsModule,    MatButtonModule,    MatCardModule, MatFormFieldModule, MatInputModule,\n    MatToolbarModule,\n    RouterModule.forRoot(routes)\n  ],\n  providers: [WebService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Message } from './shared/message';\r\nimport { Component } from '@angular/core';\r\nimport { MessagesComponent } from './messages.component';\r\nimport { NewMessageComponent } from './new-message.component';\r\nimport { NavComponent } from './nav.component';\r\n\r\n@Component({\r\n  selector: 'home',\r\n  template: \r\n  `\r\n  <new-message></new-message>\r\n  <messages></messages>\r\n  `,\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class HomeComponent {\r\n}\r\n","import { Message } from './shared/message';\r\nimport { Component } from '@angular/core';\r\nimport { WebService } from './web.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'messages',\r\n    template: \r\n    `<div *ngFor=\"let message of webService.messages | async\">\r\n        <mat-card  class=\"card\">\r\n            <mat-card-title [routerLink]=\"['/messages', message.owner]\" style=\"cursor: pointer\">{{message.owner}}</mat-card-title>\r\n            <mat-card-content>{{message.text}}</mat-card-content>\r\n        </mat-card>\r\n    </div>`\r\n})\r\nexport class MessagesComponent{ \r\n\r\n    constructor(private webService: WebService\r\n        ,private route:ActivatedRoute){}\r\n    \r\n     async ngOnInit(){\r\n         var name = this.route.snapshot.params.name;\r\n         this.webService.getMessages(name);\r\n        //  this.webService.messages.subscribe(messages => this.messages = messages);\r\n        //  //await this.webService.getMessages().subscribe(res => this.messages = res);\r\n     }\r\n\r\n}","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'nav',\r\n    template: \r\n    `<mat-toolbar color='primary'>\r\n        \r\n        <button mat-button routerLink='/'>Message Board</button>\r\n        <button mat-button routerLink='/messages'>Messages</button>\r\n\r\n    </mat-toolbar>`\r\n})\r\nexport class NavComponent{ \r\n    constructor(){}\r\n}","import { Message } from './shared/message';\r\nimport { Component } from '@angular/core';\r\nimport { WebService } from './web.service';\r\n\r\n@Component({\r\n    selector: 'new-message',\r\n    template: `\r\n    <mat-card class=\"card\">\r\n        <mat-card-content>\r\n            <mat-form-field>\r\n                <input [(ngModel)]=\"message.owner\" matInput placeholder=\"Name\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <textarea [(ngModel)]=\"message.text\" matInput placeholder=\"Message\"></textarea>\r\n            </mat-form-field>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n            <button (click)=\"post()\" mat-button color='primary'>POST</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n    `\r\n})\r\n\r\nexport class NewMessageComponent{ \r\n    // @Output() onPosted = new EventEmitter();\r\n\r\n    constructor(private webService: WebService){}\r\n\r\n    message:Message = { \r\n        owner: \"\",\r\n        text: \"\"\r\n    }\r\n\r\n    post(){\r\n        //console.log(this.message);\r\n        this.webService.postMessage(this.message);\r\n        //this.onPosted.emit(this.message);\r\n    }\r\n}","import { Message } from './shared/message';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, ErrorHandler } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Subject } from 'rxjs';\r\n//import { Observable } from 'rxjs';\r\n//import 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class WebService {\r\n    BASE_URL = 'https://localhost:44308/api';\r\n    private messageStore: Message[] = [];\r\n    private messageSubject = new Subject();\r\n    messages = this.messageSubject.asObservable();\r\n    \r\n    constructor(private http: HttpClient\r\n        , private errorHandler: ErrorHandler\r\n        , private sb: MatSnackBar) {\r\n        this.getMessages();\r\n    }\r\n\r\n    getMessages(user?) {\r\n\r\n        user = (user) ? '/' + user : '';\r\n        this.http.get<Message[]>(this.BASE_URL + '/messages' + user)\r\n            .subscribe(res => {\r\n                this.messageStore = res;\r\n                this.messageSubject.next(this.messageStore);\r\n            }, error => {\r\n                this.handleError(\"Unable to get messages\");\r\n            });\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.http.post<Message>(this.BASE_URL + '/messages', message)\r\n            .subscribe(res => {\r\n                this.messageStore.push(res);\r\n                this.messageSubject.next(this.messageStore);\r\n            }, error => this.handleError(\"Unable to post message\"));\r\n    }\r\n\r\n    private handleError(error) {\r\n        console.error(error);\r\n        this.sb.open(error, \"Close\", { duration: 2000 });\r\n    }\r\n}\r\n\r\n/*\r\n//getMessages():  Observable<Message[]>{\r\nasync getMessages(user?) {\r\n        try {\r\n            user = (user) ? '/'+user : '';\r\n            var response = await this.http.get<Message[]>(this.BASE_URL+'/messages'+user);\r\n            response.subscribe(res => this.messages = res,\r\n                                 error=>this.handleError(\"Unable to get messages\"));\r\n        } catch (error) {\r\n            this.errorHandler.handleError(error);\r\n        }\r\n\r\n        //.map((result: Response) => this.messages = result.json());\r\n    }\r\n\r\n    async postMessage(message:Message){\r\n        var response = this.http.post<Message>(this.BASE_URL+'/messages', message);//.toPromise();\r\n        response.subscribe(res => this.messages.push(res),\r\n                                 error=>this.handleError(\"Unable to post message\"));\r\n    }\r\n*/","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}